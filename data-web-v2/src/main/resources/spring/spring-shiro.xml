<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<bean id="shiroRealm" class="com.intellbi.auth.ShiroRealm"/>

	<!-- Shiro's main business-tier object for web-enabled applications (use 
org.apache.shiro.web.mgt.DefaultWebSecurityManager instead when there is 
		no web environment) -->
		
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app (realm configured next, below). If you have multiple realms, use the 'realms' property instead. -->
		<!--这里的sampleRealm需要我们自己实现，主要包括2个方法 1. 用户登录的验证（授权） 2. 用户具有的角色和权限（认证） 且看下面介绍 -->
		<property name="realm" ref="shiroRealm" />
		<!-- Uncomment this next property if you want heterogenous session access 
			or clusterable/distributable sessions. The default value is 'http' which 
			uses the Servlet container's HttpSession as the underlying Session implementation. 
			<property name="sessionMode" value="native"/> -->
	</bean>

	<!-- Post processor that automatically invokes init() and destroy() methods -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- 自定义角色过滤器 支持多个角色可以访问同一个资源 eg:/home.jsp = authc,roleOR[admin,user] 用户有admin或者user角色 
		就可以访问 -->
	<!--bean id="roleOR" class="com.yale.app.security.OneRoleAuthorizationFilter" /-->
	<!-- Define the Shiro Filter here (as a FactoryBean) instead of directly 
		in web.xml - web.xml uses the DelegatingFilterProxy to access this bean. 
		This allows us to wire things with more control as well utilize nice Spring 
		things such as PropertiesPlaceholderConfigurer and abstract beans or anything 
		else we might need: -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/index.jsp" />
		<property name="unauthorizedUrl" value="/register/unauthorized" />
		<!--property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/index.jsp = authc
				</page/addItem* = authc,roles[数据管理员]
				/page/file* = authc,roleOR[数据管理员,普通用户]
				/page/listItems* = authc,roleOR[数据管理员,普通用户]
				/page/showItem* = authc,roleOR[数据管理员,普通用户]
				/page/updateItem*=authc,roles[数据管理员]>
			</value>
		</property-->
	</bean>

</beans>
